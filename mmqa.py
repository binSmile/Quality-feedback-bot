# @feedbackbot

"""
Attention! You must put api-key into config.py
"""
from config import token
adminslist = [8888888]  # list of telegrams admins id


import os
import shutil
from datetime import datetime
import telebot
from telebot import types
import sqlite3
import zipfile

print('bot starts')

with open('statexport.log', 'a') as logger:
    logger.write('%s bot run \n' % (datetime.now().isoformat()))

conn = sqlite3.connect('database.db', check_same_thread=False,
                       isolation_level=None,
                       detect_types=sqlite3.PARSE_COLNAMES
                       )
cursor = conn.cursor()


def db_table_val(user_id: int, user_name: str, user_surname: str, username: str, Goodway: str, CleanShowroom: str,
                 WaitingQueueTerminal: str, WaitingQueueDispatcher: str, CleanWaitingQueue: str, datetime: str,
                 ShowRoomPhoto: str, WaitingQueuePhoto: str):
    cursor.execute(
        'INSERT INTO answers (user_id,user_name, user_surname, username, Goodway, CleanShowroom,  WaitingQueueTerminal, \
         WaitingQueueDispatcher,  CleanWaitingQueue, datetime, ShowRoomPhoto, WaitingQueuePhoto) VALUES \
          (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
        (user_id, user_name, user_surname, username, Goodway, CleanShowroom, WaitingQueueTerminal,
         WaitingQueueDispatcher, CleanWaitingQueue, datetime, ShowRoomPhoto, WaitingQueuePhoto))
    conn.commit()




def zipdir(path, ziph):
    # ziph is zipfile handle
    for root, dirs, files in os.walk(path):
        for file in files:
            ziph.write(os.path.join(root, file))


def getFolderSize(p):
    from functools import partial
    prepend = partial(os.path.join, p)
    return sum([(os.path.getsize(f) if os.path.isfile(f) else getFolderSize(f)) for f in
                map(prepend, os.listdir(p))])


def check_permission(cursor, uid):
    c = cursor
    query = c.execute("select admin_id FROM admins WHERE admin_id = %s;" % uid)
    a = cursor.fetchall()
    return bool(a)


def export(cursor):
    from xlsxwriter.workbook import Workbook
    workbook = Workbook('answers.xlsx')
    worksheet = workbook.add_worksheet()
    c = cursor
    mysel = c.execute("SELECT * FROM answers")
    head = ['N', 'user_name', 'user_surname', 'username', 'user_id', 'Goodway', 'CleanShowroom', 'WaitingQueueTerminal',
            'WaitingQueueDispatcher', 'CleanWaitingQueue', '–í—Ä–µ–º—è', 'ShowRoomPhoto', 'WaitingQueuePhoto']
    worksheet.write_row(0, 0, head)
    head = ['N', 'user_name', 'user_surname', 'username', 'user_id', '–ü–æ–Ω—è—Ç–Ω—ã–π –ø—É—Ç—å', '–ß–∏—Å—Ç–æ—Ç–∞ –≤ –≤—ã—Å—Ç–æ–≤–æ—á–Ω–æ–π –∑–æ–Ω–µ',
            '–û—á–µ—Ä–µ–¥—å –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª', '–æ—á–µ—Ä–µ–¥—å –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É', '–ß–∏—Å—Ç–æ—Ç–∞ –≤ –∑–æ–Ω–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤', '–í—Ä–µ–º—è', '–§–æ—Ç–æ –®–æ—É—Ä—É–º',
            '–§–æ—Ç–æ –û—á–µ—Ä–µ–¥—å']
    worksheet.write_row(1, 0, head)

    for i, row in enumerate(mysel):
        for j, value in enumerate(row):
            worksheet.write(i + 2, j, value)
    workbook.close()

    zipf = zipfile.ZipFile('photos.zip', 'w', zipfile.ZIP_DEFLATED)
    zipdir('photos/', zipf)
    zipf.close()


states = {}
inventories = {}
notes = {}
wait = {}
bot = telebot.TeleBot(token)
Flag = {}


@bot.message_handler(commands=["start", "export", "clean", "stat", "addadmin", "deladmin","statext"])
def start_game(message):
    user = message.chat.id
    states[user] = 0
    if 'start' in message.text:
        inventories[user] = []
        bot.send_message(user, "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –Ø ‚Äì feedbackbot –∏ —è —Ä–∞–¥, —á—Ç–æ –í—ã —Ä–µ—à–∏–ª–∏ –ø—Ä–æ–π—Ç–∏ –Ω–∞—à –∫–≤–µ—Å—Ç üôÇ")

        if not notes.get(user):
            notes[user] = {}
        notes[user]['us_name'] = message.from_user.first_name
        notes[user]['us_sname'] = message.from_user.last_name
        notes[user]['us_uname'] = message.from_user.username

        process_state(user, states[user], inventories[user])
    else:
        if not check_permission(cursor, user):
            with open('statexport.log', 'a') as logger:
                logger.write(
                    '%s %s %s %s BLOCK \n' % (datetime.now().isoformat(), user, message.from_user.username, message.text))
        else:
            with open('statexport.log', 'a') as logger:
                logger.write(
                    '%s %s %s %s \n' % (datetime.now().isoformat(), user, message.from_user.username, message.text))
            if 'export' in message.text:
                # print(user,message.from_user.username)
                export(cursor)
                bot.send_message(user, "–í–æ—Ç —á—Ç–æ –ª—é–¥–∏ –≥–æ–≤–æ—Ä—è—Ç!")
                with  open('answers.xlsx', 'rb') as statdata:
                    bot.send_document(message.chat.id, statdata)
                with  open('photos.zip', 'rb') as statdata:
                    bot.send_document(message.chat.id, statdata)
                os.remove('photos.zip')
                os.remove('answers.xlsx')

            elif 'stat' in message.text:
                cursor.execute('SELECT Count(*) FROM answers')
                conn.commit()
                DBlineCounts = cursor.fetchall()[0][0]

                DBsize = os.stat('database.db').st_size / 1e6
                Photosize = getFolderSize('photos') / 1e6

                bot.send_message(user,
                                 """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ \n 
                –í –±–∞–∑–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è  %s –æ—Ç–≤–µ—Ç–∞(–æ–≤)\n
                –ë–∞–∑–∞ –≤–µ—Å–∏—Ç: %s –ú–± \n
                –§–æ—Ç–æ–ø–∞–ø–∫–∞ –≤–µ—Å–∏—Ç: %s –ú–±""" % (DBlineCounts, DBsize, Photosize))

                if 'statext' in message.text:

                    cursor.execute('SELECT * FROM admins')
                    admins = cursor.fetchall()
                    bot.send_message(user,'–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤: %s' % str(admins))

                    with  open('statexport.log', 'rb') as statdata:
                        bot.send_document(message.chat.id, statdata)



            elif 'clean' in message.text:
                try:

                    zipf = zipfile.ZipFile('photos_bak.zip', 'w', zipfile.ZIP_DEFLATED)
                    zipdir('Photos/', zipf)
                    zipf.close()

                    zipf = zipfile.ZipFile('database_bak.db.zip', 'w', zipfile.ZIP_DEFLATED)
                    zipdir('database.db', zipf)
                    zipf.close()

                    shutil.rmtree('Photos')
                    os.mkdir('photos')
                except Exception as e:
                    bot.send_message(user, "—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.")
                    bot.reply_to(message, e)

                cursor.execute('delete from answers')
                conn.commit()
                bot.send_message(user, "–í—Å—ë –∑–∞–±—ã–ª")

            elif 'addadmin' in message.text:
                nuid = message.text.split(' ')[-1]
                cursor.execute(
                    'INSERT INTO admins (admin_id) VALUES (%s)' % nuid)
                conn.commit()
                bot.send_message(user, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –¥–æ–±–∞–≤–ª–µ–Ω –∫ —Å–ø–∏—Å–∫—É –∞–¥–º–∏–Ω–æ–≤" % nuid)
            elif 'deladmin' in message.text:
                nuid = message.text.split(' ')[-1]
                cursor.execute('DELETE FROM admins WHERE admin_id = %s;' % nuid)
                conn.commit()
                bot.send_message(user, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤"  % nuid)



@bot.message_handler(content_types=['photo'])
def handle_docs_photo(message):
    user = message.chat.id
    st = states.get(user, 0)
    if st >= 4:  # –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å ==10 –Ω–∞ 11
        # if True:
        try:
            phList = []
            file_info = bot.get_file(message.photo[-1].file_id)
            downloaded_file = bot.download_file(file_info.file_path)

            src = '' + file_info.file_path;
            phList += [src]
            with open(src, 'wb') as new_file:
                new_file.write(downloaded_file)


        except Exception as e:
            bot.send_message(user, "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ç–æ. –ù–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –Ø –Ω–µ —Å–º–æ–≥ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ")
            bot.reply_to(message, e)
            phList = e
        wait[user] = False
        if st in [4, 5]:
            print(st)
            states[user] = 5
            if not notes[user].get('ShowRoomPhoto'):
                notes[user]['ShowRoomPhoto'] = []
            notes[user]['ShowRoomPhoto'] += phList
        elif st in [10, 11]:
            states[user] = 11
            if not notes[user].get('WaitingQueuePhoto'):
                notes[user]['WaitingQueuePhoto'] = []
            notes[user]['WaitingQueuePhoto'] += phList

        if not Flag.get(user):
            Flag[user] = True
            bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ç–æ")
            process_state(user, states[user], inventories[user])


@bot.message_handler(content_types=['text'])
def thanking(message):
    user = message.chat.id
    st = states.get(user, 0)
    if not notes.get(user):
        notes[user] = {}

    if st == 2:  # Goodway
        notes[user]['Goodway'] = message.text
        bot.send_message(user, "–°–ø–∞—Å–∏–±–æ")
        wait[user] = False
        states[user] = 3
        process_state(user, states[user], inventories[user])
    elif st == 4:
        #     notes[user]['CleanShowroom'] = message.text  ## –æ—Ñ–æ—Ä–º–∏—Ç—å –∫—Ä—É–≥ –∫–∞–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ —É–±—Ä–∞—Ç—å?
        #     bot.send_message(user, "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ç–æ")
        wait[user] = False
        states[user] = 5
        process_state(user, states[user], inventories[user])

    elif st == 6:
        notes[user]['WaitingQueueTerminal'] = message.text
        bot.send_message(user, "–ü—Ä–∏–Ω—è—Ç–æ!")
        wait[user] = False
        states[user] = 7
        process_state(user, states[user], inventories[user])

    elif st == 8:
        notes[user]['WaitingQueueDispatcher'] = message.text
        bot.send_message(user, "–ü—Ä–∏–Ω—è—Ç–æ!")
        wait[user] = False
        states[user] = 9
        process_state(user, states[user], inventories[user])

    elif st == 10:
        notes[user]['CleanWaitingQueue'] = message.text  ## –æ—Ñ–æ—Ä–º–∏—Ç—å –∫—Ä—É–≥ –∫–∞–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ —É–±—Ä–∞—Ç—å?
        bot.send_message(user, "–°–ø–∞—Å–∏–±–æ")
        wait[user] = False
        states[user] = 11
        process_state(user, states[user], inventories[user])

    # else:
    #     bot.send_message(user, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞")


@bot.callback_query_handler(func=lambda call: True)
def user_answer(call):
    user = call.message.chat.id
    if not notes.get(user):
        notes[user] = {}
    process_answer(user, call.data)


def process_state(user, state, inventory):
    kb = types.InlineKeyboardMarkup()

    # bot.send_photo(user, pictures[state])

    if state == 0:
        msg = "–í–∞–º –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–æ, –∫—É–¥–∞ –Ω—É–∂–Ω–æ –∑–∞–π—Ç–∏ –∏ —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞?"
        kb.add(types.InlineKeyboardButton(text="–î–∞", callback_data="GoodWayY"))
        kb.add(types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="GoodWayN"))
        bot.send_message(user, msg, reply_markup=kb)

    elif state == 3:
        msg = "–ò–¥—ë–º –¥–∞–ª—å—à–µ. \n –í –≤—ã—Å—Ç–∞–≤–æ—á–Ω–æ–π –∑–æ–Ω–µ —á–∏—Å—Ç–æ, –Ω–µ—Ç –º—É—Å–æ—Ä–∞ –∏ –ø—ã–ª–∏?"
        kb.add(types.InlineKeyboardButton(text="–ß–∏—Å—Ç–æ!", callback_data="CleanShowroom0"))
        kb.add(types.InlineKeyboardButton(text="–í–∏–∂—É –ø—ã–ª—å", callback_data="CleanShowroom1"))
        kb.add(types.InlineKeyboardButton(text="–í–∏–∂—É –≥—Ä—è–∑—å", callback_data="CleanShowroom2"))
        bot.send_message(user, msg, reply_markup=kb)

    elif state == 5:

        msg = "–í—Ä–µ–º—è –≤ –æ—á–µ—Ä–µ–¥–∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª –∑–∞–Ω–∏–º–∞–µ—Ç –º–µ–Ω–µ–µ 1 –º–∏–Ω—É—Ç—ã?"
        kb.add(types.InlineKeyboardButton(text="–î–∞, –º–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã", callback_data="WaitingQueueTerminal0"))
        kb.add(types.InlineKeyboardButton(text="–ù–µ—Ç, –±–æ–ª–µ–µ –º–∏–Ω—É—Ç—ã", callback_data="WaitingQueueTerminal1"))
        bot.send_photo(user, caption=msg, photo=open('terminal.jpg', 'rb'), reply_markup=kb)
        # bot.send_message(user, msg, reply_markup=kb)

    elif state == 7:
        msg = "–í—Ä–µ–º—è –≤ –æ—á–µ—Ä–µ–¥–∏ –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É –∑–∞–Ω–∏–º–∞–µ—Ç –º–µ–Ω–µ–µ 5 –º–∏–Ω—É—Ç? "
        kb.add(types.InlineKeyboardButton(text="–î–∞, –±—ã—Å—Ç—Ä–æ", callback_data="WaitingQueueDispatcherY"))
        kb.add(types.InlineKeyboardButton(text="–ù–µ—Ç, –¥–æ–ª–≥–æ", callback_data="WaitingQueueDispatcherN"))
        bot.send_photo(user, caption=msg, photo=open('operator.jpg', 'rb'), reply_markup=kb)
        # bot.send_message(user, msg, reply_markup=kb)

    elif state == 9:
        msg = "–í –∑–æ–Ω–µ –æ–∂–∏–¥–∞–Ω–∏—è –ö–ª–∏–µ–Ω—Ç–æ–≤ –±—ã–ª–æ —á–∏—Å—Ç–æ?"
        kb.add(types.InlineKeyboardButton(text="–î–∞", callback_data="CleanWaitingQueueY"))
        kb.add(types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="CleanWaitingQueueN"))
        bot.send_message(user, msg, reply_markup=kb)

    elif state == 11:

        bot.send_message(user,
                         "üèÜ –í—ã –ø—Ä–æ—à–ª–∏ –∫–≤–µ—Å—Ç –¥–æ –∫–æ–Ω—Ü–∞! üèÜ \n –≠—Ç–æ –ø–æ–±–µ–¥–∞! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –í–∞—Å –∏ –Ω–∞–¥–µ–µ–º—Å—è –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è –≤–Ω–æ–≤—å!")
        # bot.send_message(user, str(notes))
        finish(user, notes[user])
        states[user] = 0


def finish(user, result):
    r = result
    db_table_val(user,
                 r.get('us_name'),
                 r.get('us_sname'),
                 r.get('us_uname'),
                 r.get('Goodway'),
                 r.get('CleanShowroom'),
                 r.get('WaitingQueueTerminal'),
                 r.get('WaitingQueueDispatcher'),
                 r.get('CleanWaitingQueue'),
                 datetime.now().isoformat(),
                 str(r.get('ShowRoomPhoto')),
                 str(r.get('WaitingQueuePhoto')))


def process_answer(user, answer):
    if states.get(user, 0) == 0:
        if "GoodWay" in answer:
            if answer == 'GoodWayY':
                bot.send_message(user, "–û—Ç–ª–∏—á–Ω–æ!")
                states[user] = 3
                notes[user]['Goodway'] = '–î–∞'

            elif answer == 'GoodWayN':
                bot.send_message(user, "–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–≤–æ—ë–º –æ–ø—ã—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
                states[user] = 2
                wait[user] = True

    elif states[user] == 3:
        if answer == 'CleanShowroom0':
            bot.send_message(user, "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ!")
            states[user] = 5
            notes[user]['CleanShowroom'] = '–ß–∏—Å—Ç–æ'
        else:
            if answer == 'CleanShowroom1':
                notes[user]['CleanShowroom'] = '–ü—ã–ª—å'
            elif answer == 'CleanShowroom2':
                notes[user]['CleanShowroom'] = '–ì—Ä—è–∑—å'

            bot.send_message(user, "–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –º—É—Å–æ—Ä/–ø—ã–ª—å –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ, –∞ —è –≤—Å—ë –∏—Å–ø—Ä–∞–≤–ª—é!")
            states[user] = 4
            wait[user] = True
            Flag[user] = False

    elif states[user] == 5:
        if answer == 'WaitingQueueTerminal0':
            bot.send_message(user, "üëçüèª")
            states[user] = 7
            notes[user]['WaitingQueueTerminal'] = '1'


        else:
            bot.send_message(user, "–°–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–Ω–æ?")
            states[user] = 6
            wait[user] = True

    elif states[user] == 7:
        if answer == 'WaitingQueueDispatcherY':
            bot.send_message(user, "üëçüèª")
            states[user] = 9
            notes[user]['WaitingQueueDispatcher'] = '–ú–µ–Ω–µ–µ 5'

        else:
            bot.send_message(user, "–°–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–Ω–æ?")
            states[user] = 8
            wait[user] = True

    elif states[user] == 9:
        if answer == 'CleanWaitingQueueY':
            # bot.send_message(user, "üëçüèª")
            states[user] = 11
            notes[user]['CleanWaitingQueue'] = '–ß–∏—Å—Ç–æ'
        else:
            bot.send_message(user, "–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –º—É—Å–æ—Ä/–ø—ã–ª—å –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ, –∞ —è –≤—Å—ë –∏—Å–ø—Ä–∞–≤–ª—é!")
            states[user] = 10
            wait[user] = True
            Flag[user] = False

    if not wait.get(user, False):
        process_state(user, states[user], inventories[user])


if __name__ == '__main__':
    # bot.infinity_polling()
    bot.polling(none_stop=True)
